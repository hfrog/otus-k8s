name: app
on:
- push
- workflow_dispatch
jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v4
    - run: scripts/install_awscli.sh
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - run: scripts/app_prepare_env.sh
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        BUCKET: ${{ secrets.BUCKET }}
    - uses: werf/actions/install@v1.2
    - run: |
        cd $GITHUB_WORKSPACE/app
        source "$(werf ci-env github --as-file)"
        werf kubectl create namespace $(werf helm get-namespace) --dry-run=client --output=yaml | werf kubectl apply -f -
        eval werf kubectl create secret docker-registry registrysecret --namespace=$(werf helm get-namespace) \
          --docker-username=json_key --docker-password=\'$(echo $IMAGE_PULLER_KEY | base64 -d)\' --docker-server=cr.yandex \
          --dry-run=client --output=yaml | werf kubectl apply -f -

        echo $IMAGE_UPLOADER_KEY | base64 -d | werf cr login --username=json_key --password-stdin=true cr.yandex
        werf converge --repo $CONTAINER_REPO --add-custom-tag '%image_safe_slug%' --set frontend.external_ip=$LB1_EXTERNAL_IP
        werf cleanup --repo $CONTAINER_REPO
      env:
        WERF_ENV: dev
        IMAGE_PULLER_KEY: ${{ secrets.IMAGE_PULLER_KEY }}
        IMAGE_UPLOADER_KEY: ${{ secrets.IMAGE_UPLOADER_KEY }}
        CONTAINER_REPO: ${{ secrets.CONTAINER_REPO }}
